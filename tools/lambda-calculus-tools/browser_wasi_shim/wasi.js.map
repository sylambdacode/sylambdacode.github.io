{"version":3,"sources":["../src/wasi.ts"],"sourcesContent":["import * as wasi from \"./wasi_defs.js\";\nimport { Fd } from \"./fd.js\";\nimport { debug } from \"./debug.js\";\n\nexport interface Options {\n  debug?: boolean;\n}\n\n/**\n * An exception that is thrown when the process exits.\n **/\nexport class WASIProcExit extends Error {\n  constructor(public readonly code: number) {\n    super(\"exit with exit code \" + code);\n  }\n}\n\nexport default class WASI {\n  #freeFds: Array<number> = [];\n\n  args: Array<string> = [];\n  env: Array<string> = [];\n  fds: Array<Fd> = [];\n  inst: { exports: { memory: WebAssembly.Memory } };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  wasiImport: { [key: string]: (...args: Array<any>) => unknown };\n\n  /// Start a WASI command\n  start(instance: {\n    // FIXME v0.3: close opened Fds after execution\n    exports: { memory: WebAssembly.Memory; _start: () => unknown };\n  }) {\n    this.inst = instance;\n    try {\n      instance.exports._start();\n      return 0;\n    } catch (e) {\n      if (e instanceof WASIProcExit) {\n        return e.code;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /// Initialize a WASI reactor\n  initialize(instance: {\n    exports: { memory: WebAssembly.Memory; _initialize?: () => unknown };\n  }) {\n    this.inst = instance;\n    if (instance.exports._initialize) {\n      instance.exports._initialize();\n    }\n  }\n\n  constructor(\n    args: Array<string>,\n    env: Array<string>,\n    fds: Array<Fd>,\n    options: Options = {},\n  ) {\n    debug.enable(options.debug);\n\n    this.args = args;\n    this.env = env;\n    this.fds = fds;\n    const self = this;\n    this.wasiImport = {\n      args_sizes_get(argc: number, argv_buf_size: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        buffer.setUint32(argc, self.args.length, true);\n        let buf_size = 0;\n        for (const arg of self.args) {\n          buf_size += arg.length + 1;\n        }\n        buffer.setUint32(argv_buf_size, buf_size, true);\n        debug.log(\n          buffer.getUint32(argc, true),\n          buffer.getUint32(argv_buf_size, true),\n        );\n        return 0;\n      },\n      args_get(argv: number, argv_buf: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        const orig_argv_buf = argv_buf;\n        for (let i = 0; i < self.args.length; i++) {\n          buffer.setUint32(argv, argv_buf, true);\n          argv += 4;\n          const arg = new TextEncoder().encode(self.args[i]);\n          buffer8.set(arg, argv_buf);\n          buffer.setUint8(argv_buf + arg.length, 0);\n          argv_buf += arg.length + 1;\n        }\n        if (debug.enabled) {\n          debug.log(\n            new TextDecoder(\"utf-8\").decode(\n              buffer8.slice(orig_argv_buf, argv_buf),\n            ),\n          );\n        }\n        return 0;\n      },\n\n      environ_sizes_get(environ_count: number, environ_size: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        buffer.setUint32(environ_count, self.env.length, true);\n        let buf_size = 0;\n        for (const environ of self.env) {\n          buf_size += new TextEncoder().encode(environ).length + 1;\n        }\n        buffer.setUint32(environ_size, buf_size, true);\n        debug.log(\n          buffer.getUint32(environ_count, true),\n          buffer.getUint32(environ_size, true),\n        );\n        return 0;\n      },\n      environ_get(environ: number, environ_buf: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        const orig_environ_buf = environ_buf;\n        for (let i = 0; i < self.env.length; i++) {\n          buffer.setUint32(environ, environ_buf, true);\n          environ += 4;\n          const e = new TextEncoder().encode(self.env[i]);\n          buffer8.set(e, environ_buf);\n          buffer.setUint8(environ_buf + e.length, 0);\n          environ_buf += e.length + 1;\n        }\n        if (debug.enabled) {\n          debug.log(\n            new TextDecoder(\"utf-8\").decode(\n              buffer8.slice(orig_environ_buf, environ_buf),\n            ),\n          );\n        }\n        return 0;\n      },\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      clock_res_get(id: number, res_ptr: number): number {\n        let resolutionValue: bigint;\n        switch (id) {\n          case wasi.CLOCKID_MONOTONIC: {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n            // > Resolution in isolated contexts: 5 microseconds\n            resolutionValue = 5_000n; // 5 microseconds\n            break;\n          }\n          case wasi.CLOCKID_REALTIME: {\n            resolutionValue = 1_000_000n; // 1 millisecond?\n            break;\n          }\n          default:\n            return wasi.ERRNO_NOSYS;\n        }\n        const view = new DataView(self.inst.exports.memory.buffer);\n        view.setBigUint64(res_ptr, resolutionValue, true);\n        return wasi.ERRNO_SUCCESS;\n      },\n      clock_time_get(id: number, precision: bigint, time: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        if (id === wasi.CLOCKID_REALTIME) {\n          buffer.setBigUint64(\n            time,\n            BigInt(new Date().getTime()) * 1_000_000n,\n            true,\n          );\n        } else if (id == wasi.CLOCKID_MONOTONIC) {\n          let monotonic_time: bigint;\n          try {\n            monotonic_time = BigInt(Math.round(performance.now() * 1000000));\n          } catch {\n            // performance.now() is only available in browsers.\n            // TODO use the perf_hooks builtin module for NodeJS\n            monotonic_time = 0n;\n          }\n          buffer.setBigUint64(time, monotonic_time, true);\n        } else {\n          // TODO\n          buffer.setBigUint64(time, 0n, true);\n        }\n        return 0;\n      },\n\n      fd_advise(\n        fd: number,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        offset: bigint,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        len: bigint,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        advice: number,\n      ): number {\n        if (self.fds[fd] != undefined) {\n          return wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_allocate(fd: number, offset: bigint, len: bigint): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_allocate(offset, len);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_close(fd: number): number {\n        if (self.fds[fd] != undefined) {\n          const ret = self.fds[fd].fd_close();\n          self.fds[fd] = undefined;\n          self.#freeFds.push(fd);\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_datasync(fd: number): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_sync();\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_fdstat_get(fd: number, fdstat_ptr: number): number {\n        if (self.fds[fd] != undefined) {\n          const { ret, fdstat } = self.fds[fd].fd_fdstat_get();\n          if (fdstat != null) {\n            fdstat.write_bytes(\n              new DataView(self.inst.exports.memory.buffer),\n              fdstat_ptr,\n            );\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_fdstat_set_flags(fd: number, flags: number): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_fdstat_set_flags(flags);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_fdstat_set_rights(\n        fd: number,\n        fs_rights_base: bigint,\n        fs_rights_inheriting: bigint,\n      ): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_fdstat_set_rights(\n            fs_rights_base,\n            fs_rights_inheriting,\n          );\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_filestat_get(fd: number, filestat_ptr: number): number {\n        if (self.fds[fd] != undefined) {\n          const { ret, filestat } = self.fds[fd].fd_filestat_get();\n          if (filestat != null) {\n            filestat.write_bytes(\n              new DataView(self.inst.exports.memory.buffer),\n              filestat_ptr,\n            );\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_filestat_set_size(fd: number, size: bigint): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_filestat_set_size(size);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_filestat_set_times(\n        fd: number,\n        atim: bigint,\n        mtim: bigint,\n        fst_flags: number,\n      ): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_filestat_set_times(atim, mtim, fst_flags);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_pread(\n        fd: number,\n        iovs_ptr: number,\n        iovs_len: number,\n        offset: bigint,\n        nread_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const iovecs = wasi.Iovec.read_bytes_array(\n            buffer,\n            iovs_ptr,\n            iovs_len,\n          );\n          let nread = 0;\n          for (const iovec of iovecs) {\n            const { ret, data } = self.fds[fd].fd_pread(iovec.buf_len, offset);\n            if (ret != wasi.ERRNO_SUCCESS) {\n              buffer.setUint32(nread_ptr, nread, true);\n              return ret;\n            }\n            buffer8.set(data, iovec.buf);\n            nread += data.length;\n            offset += BigInt(data.length);\n            if (data.length != iovec.buf_len) {\n              break;\n            }\n          }\n          buffer.setUint32(nread_ptr, nread, true);\n          return wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_prestat_get(fd: number, buf_ptr: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const { ret, prestat } = self.fds[fd].fd_prestat_get();\n          if (prestat != null) {\n            prestat.write_bytes(buffer, buf_ptr);\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n\n      fd_prestat_dir_name(\n        fd: number,\n        path_ptr: number,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        path_len: number,\n      ): number {\n        // FIXME don't ignore path_len\n        if (self.fds[fd] != undefined) {\n          const { ret, prestat } = self.fds[fd].fd_prestat_get();\n          if (prestat == null) {\n            return ret;\n          }\n          const prestat_dir_name = prestat.inner.pr_name;\n\n          const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n          buffer8.set(prestat_dir_name.slice(0, path_len), path_ptr);\n\n          return prestat_dir_name.byteLength > path_len\n            ? wasi.ERRNO_NAMETOOLONG\n            : wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_pwrite(\n        fd: number,\n        iovs_ptr: number,\n        iovs_len: number,\n        offset: bigint,\n        nwritten_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const iovecs = wasi.Ciovec.read_bytes_array(\n            buffer,\n            iovs_ptr,\n            iovs_len,\n          );\n          let nwritten = 0;\n          for (const iovec of iovecs) {\n            const data = buffer8.slice(iovec.buf, iovec.buf + iovec.buf_len);\n            const { ret, nwritten: nwritten_part } = self.fds[fd].fd_pwrite(\n              data,\n              offset,\n            );\n            if (ret != wasi.ERRNO_SUCCESS) {\n              buffer.setUint32(nwritten_ptr, nwritten, true);\n              return ret;\n            }\n            nwritten += nwritten_part;\n            offset += BigInt(nwritten_part);\n            if (nwritten_part != data.byteLength) {\n              break;\n            }\n          }\n          buffer.setUint32(nwritten_ptr, nwritten, true);\n          return wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_read(\n        fd: number,\n        iovs_ptr: number,\n        iovs_len: number,\n        nread_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const iovecs = wasi.Iovec.read_bytes_array(\n            buffer,\n            iovs_ptr,\n            iovs_len,\n          );\n          let nread = 0;\n          for (const iovec of iovecs) {\n            const { ret, data } = self.fds[fd].fd_read(iovec.buf_len);\n            if (ret != wasi.ERRNO_SUCCESS) {\n              buffer.setUint32(nread_ptr, nread, true);\n              return ret;\n            }\n            buffer8.set(data, iovec.buf);\n            nread += data.length;\n            if (data.length != iovec.buf_len) {\n              break;\n            }\n          }\n          buffer.setUint32(nread_ptr, nread, true);\n          return wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_readdir(\n        fd: number,\n        buf: number,\n        buf_len: number,\n        cookie: bigint,\n        bufused_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          let bufused = 0;\n\n          // eslint-disable-next-line no-constant-condition\n          while (true) {\n            const { ret, dirent } = self.fds[fd].fd_readdir_single(cookie);\n            if (ret != 0) {\n              buffer.setUint32(bufused_ptr, bufused, true);\n              return ret;\n            }\n            if (dirent == null) {\n              break;\n            }\n\n            if (buf_len - bufused < dirent.head_length()) {\n              bufused = buf_len;\n              break;\n            }\n\n            const head_bytes = new ArrayBuffer(dirent.head_length());\n            dirent.write_head_bytes(new DataView(head_bytes), 0);\n            buffer8.set(\n              new Uint8Array(head_bytes).slice(\n                0,\n                Math.min(head_bytes.byteLength, buf_len - bufused),\n              ),\n              buf,\n            );\n            buf += dirent.head_length();\n            bufused += dirent.head_length();\n\n            if (buf_len - bufused < dirent.name_length()) {\n              bufused = buf_len;\n              break;\n            }\n\n            dirent.write_name_bytes(buffer8, buf, buf_len - bufused);\n            buf += dirent.name_length();\n            bufused += dirent.name_length();\n\n            cookie = dirent.d_next;\n          }\n\n          buffer.setUint32(bufused_ptr, bufused, true);\n          return 0;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_renumber(fd: number, to: number) {\n        if (self.fds[fd] != undefined && self.fds[to] != undefined) {\n          const ret = self.fds[to].fd_close();\n          if (ret != 0) {\n            return ret;\n          }\n          self.fds[to] = self.fds[fd];\n          self.fds[fd] = undefined;\n          self.#freeFds.push(fd);\n          return 0;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_seek(\n        fd: number,\n        offset: bigint,\n        whence: number,\n        offset_out_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const { ret, offset: offset_out } = self.fds[fd].fd_seek(\n            offset,\n            whence,\n          );\n          buffer.setBigInt64(offset_out_ptr, offset_out, true);\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_sync(fd: number): number {\n        if (self.fds[fd] != undefined) {\n          return self.fds[fd].fd_sync();\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_tell(fd: number, offset_ptr: number): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const { ret, offset } = self.fds[fd].fd_tell();\n          buffer.setBigUint64(offset_ptr, offset, true);\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      fd_write(\n        fd: number,\n        iovs_ptr: number,\n        iovs_len: number,\n        nwritten_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const iovecs = wasi.Ciovec.read_bytes_array(\n            buffer,\n            iovs_ptr,\n            iovs_len,\n          );\n          let nwritten = 0;\n          for (const iovec of iovecs) {\n            const data = buffer8.slice(iovec.buf, iovec.buf + iovec.buf_len);\n            const { ret, nwritten: nwritten_part } =\n              self.fds[fd].fd_write(data);\n            if (ret != wasi.ERRNO_SUCCESS) {\n              buffer.setUint32(nwritten_ptr, nwritten, true);\n              return ret;\n            }\n            nwritten += nwritten_part;\n            if (nwritten_part != data.byteLength) {\n              break;\n            }\n          }\n          buffer.setUint32(nwritten_ptr, nwritten, true);\n          return wasi.ERRNO_SUCCESS;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_create_directory(\n        fd: number,\n        path_ptr: number,\n        path_len: number,\n      ): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          return self.fds[fd].path_create_directory(path);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_filestat_get(\n        fd: number,\n        flags: number,\n        path_ptr: number,\n        path_len: number,\n        filestat_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          const { ret, filestat } = self.fds[fd].path_filestat_get(flags, path);\n          if (filestat != null) {\n            filestat.write_bytes(buffer, filestat_ptr);\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_filestat_set_times(\n        fd: number,\n        flags: number,\n        path_ptr: number,\n        path_len: number,\n        atim: bigint,\n        mtim: bigint,\n        fst_flags: number,\n      ) {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          return self.fds[fd].path_filestat_set_times(\n            flags,\n            path,\n            atim,\n            mtim,\n            fst_flags,\n          );\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_link(\n        old_fd: number,\n        old_flags,\n        old_path_ptr: number,\n        old_path_len: number,\n        new_fd: number,\n        new_path_ptr: number,\n        new_path_len: number,\n      ): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[old_fd] != undefined && self.fds[new_fd] != undefined) {\n          const old_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(old_path_ptr, old_path_ptr + old_path_len),\n          );\n          const new_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(new_path_ptr, new_path_ptr + new_path_len),\n          );\n          const { ret, inode_obj } = self.fds[old_fd].path_lookup(\n            old_path,\n            old_flags,\n          );\n          if (inode_obj == null) {\n            return ret;\n          }\n          return self.fds[new_fd].path_link(new_path, inode_obj, false);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_open(\n        fd: number,\n        dirflags,\n        path_ptr: number,\n        path_len: number,\n        oflags,\n        fs_rights_base,\n        fs_rights_inheriting,\n        fd_flags,\n        opened_fd_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          debug.log(path);\n          const { ret, fd_obj } = self.fds[fd].path_open(\n            dirflags,\n            path,\n            oflags,\n            fs_rights_base,\n            fs_rights_inheriting,\n            fd_flags,\n          );\n          if (ret != 0) {\n            return ret;\n          }\n          const opened_fd = (() => {\n            if (self.#freeFds.length > 0) {\n              const fd = self.#freeFds.pop();\n              self.fds[fd] = fd_obj;\n              return fd;\n            }\n\n            self.fds.push(fd_obj);\n            return self.fds.length - 1;\n          })();\n          buffer.setUint32(opened_fd_ptr, opened_fd, true);\n          return 0;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_readlink(\n        fd: number,\n        path_ptr: number,\n        path_len: number,\n        buf_ptr: number,\n        buf_len: number,\n        nread_ptr: number,\n      ): number {\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          debug.log(path);\n          const { ret, data } = self.fds[fd].path_readlink(path);\n          if (data != null) {\n            const data_buf = new TextEncoder().encode(data);\n            if (data_buf.length > buf_len) {\n              buffer.setUint32(nread_ptr, 0, true);\n              return wasi.ERRNO_BADF;\n            }\n            buffer8.set(data_buf, buf_ptr);\n            buffer.setUint32(nread_ptr, data_buf.length, true);\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_remove_directory(\n        fd: number,\n        path_ptr: number,\n        path_len: number,\n      ): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          return self.fds[fd].path_remove_directory(path);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_rename(\n        fd: number,\n        old_path_ptr: number,\n        old_path_len: number,\n        new_fd: number,\n        new_path_ptr: number,\n        new_path_len: number,\n      ): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined && self.fds[new_fd] != undefined) {\n          const old_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(old_path_ptr, old_path_ptr + old_path_len),\n          );\n          const new_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(new_path_ptr, new_path_ptr + new_path_len),\n          );\n          // eslint-disable-next-line prefer-const\n          let { ret, inode_obj } = self.fds[fd].path_unlink(old_path);\n          if (inode_obj == null) {\n            return ret;\n          }\n          ret = self.fds[new_fd].path_link(new_path, inode_obj, true);\n          if (ret != wasi.ERRNO_SUCCESS) {\n            if (\n              self.fds[fd].path_link(old_path, inode_obj, true) !=\n              wasi.ERRNO_SUCCESS\n            ) {\n              throw \"path_link should always return success when relinking an inode back to the original place\";\n            }\n          }\n          return ret;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_symlink(\n        old_path_ptr: number,\n        old_path_len: number,\n        fd: number,\n        new_path_ptr: number,\n        new_path_len: number,\n      ): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const old_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(old_path_ptr, old_path_ptr + old_path_len),\n          );\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const new_path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(new_path_ptr, new_path_ptr + new_path_len),\n          );\n          return wasi.ERRNO_NOTSUP;\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      path_unlink_file(fd: number, path_ptr: number, path_len: number): number {\n        const buffer8 = new Uint8Array(self.inst.exports.memory.buffer);\n        if (self.fds[fd] != undefined) {\n          const path = new TextDecoder(\"utf-8\").decode(\n            buffer8.slice(path_ptr, path_ptr + path_len),\n          );\n          return self.fds[fd].path_unlink_file(path);\n        } else {\n          return wasi.ERRNO_BADF;\n        }\n      },\n      poll_oneoff(\n        in_ptr: number,\n        out_ptr: number,\n        nsubscriptions: number,\n      ): number {\n        if (nsubscriptions === 0) {\n          return wasi.ERRNO_INVAL;\n        }\n        // TODO: For now, we only support a single subscription just to be enough for wasi-libc's\n        // clock_nanosleep.\n        if (nsubscriptions > 1) {\n          debug.log(\"poll_oneoff: only a single subscription is supported\");\n          return wasi.ERRNO_NOTSUP;\n        }\n\n        // Read a subscription from the in buffer\n        const buffer = new DataView(self.inst.exports.memory.buffer);\n        const s = wasi.Subscription.read_bytes(buffer, in_ptr);\n        const eventtype = s.eventtype;\n        const clockid = s.clockid;\n        const timeout = s.timeout;\n        // TODO: For now, we only support clock subscriptions.\n        if (eventtype !== wasi.EVENTTYPE_CLOCK) {\n          debug.log(\"poll_oneoff: only clock subscriptions are supported\");\n          return wasi.ERRNO_NOTSUP;\n        }\n\n        // Select timer\n        let getNow: (() => bigint) | undefined = undefined;\n        if (clockid === wasi.CLOCKID_MONOTONIC) {\n          getNow = () => BigInt(Math.round(performance.now() * 1_000_000));\n        } else if (clockid === wasi.CLOCKID_REALTIME) {\n          getNow = () => BigInt(new Date().getTime()) * 1_000_000n;\n        } else {\n          return wasi.ERRNO_INVAL;\n        }\n\n        // Perform the wait\n        const endTime =\n          (s.flags & wasi.SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME) !== 0\n            ? timeout\n            : getNow() + timeout;\n        while (endTime > getNow()) {\n          // block until the timeout is reached\n        }\n\n        // Write an event to the out buffer\n        const event = new wasi.Event(s.userdata, wasi.ERRNO_SUCCESS, eventtype);\n        event.write_bytes(buffer, out_ptr);\n\n        return wasi.ERRNO_SUCCESS;\n      },\n      proc_exit(exit_code: number) {\n        throw new WASIProcExit(exit_code);\n      },\n      proc_raise(sig: number) {\n        throw \"raised signal \" + sig;\n      },\n      sched_yield() {},\n      random_get(buf: number, buf_len: number) {\n        const buffer8 = new Uint8Array(\n          self.inst.exports.memory.buffer,\n        ).subarray(buf, buf + buf_len);\n\n        if (\n          \"crypto\" in globalThis &&\n          (typeof SharedArrayBuffer === \"undefined\" ||\n            !(self.inst.exports.memory.buffer instanceof SharedArrayBuffer))\n        ) {\n          for (let i = 0; i < buf_len; i += 65536) {\n            crypto.getRandomValues(buffer8.subarray(i, i + 65536));\n          }\n        } else {\n          for (let i = 0; i < buf_len; i++) {\n            buffer8[i] = (Math.random() * 256) | 0;\n          }\n        }\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      sock_recv(fd: number, ri_data, ri_flags) {\n        throw \"sockets not supported\";\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      sock_send(fd: number, si_data, si_flags) {\n        throw \"sockets not supported\";\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      sock_shutdown(fd: number, how) {\n        throw \"sockets not supported\";\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      sock_accept(fd: number, flags) {\n        throw \"sockets not supported\";\n      },\n    };\n  }\n}\n"],"names":["wasi","debug","WASIProcExit","Error","code","WASI","args","env","fds","inst","wasiImport","start","instance","exports","_start","e","initialize","_initialize","options","enable","self","args_sizes_get","argc","argv_buf_size","buffer","DataView","memory","setUint32","length","buf_size","arg","log","getUint32","args_get","argv","argv_buf","buffer8","Uint8Array","orig_argv_buf","i","TextEncoder","encode","set","setUint8","enabled","TextDecoder","decode","slice","environ_sizes_get","environ_count","environ_size","environ","environ_get","environ_buf","orig_environ_buf","clock_res_get","id","res_ptr","resolutionValue","CLOCKID_MONOTONIC","CLOCKID_REALTIME","ERRNO_NOSYS","view","setBigUint64","ERRNO_SUCCESS","clock_time_get","precision","time","BigInt","Date","getTime","monotonic_time","Math","round","performance","now","fd_advise","fd","offset","len","advice","undefined","ERRNO_BADF","fd_allocate","fd_close","ret","push","fd_datasync","fd_sync","fd_fdstat_get","fdstat_ptr","fdstat","write_bytes","fd_fdstat_set_flags","flags","fd_fdstat_set_rights","fs_rights_base","fs_rights_inheriting","fd_filestat_get","filestat_ptr","filestat","fd_filestat_set_size","size","fd_filestat_set_times","atim","mtim","fst_flags","fd_pread","iovs_ptr","iovs_len","nread_ptr","iovecs","Iovec","read_bytes_array","nread","iovec","data","buf_len","buf","fd_prestat_get","buf_ptr","prestat","fd_prestat_dir_name","path_ptr","path_len","prestat_dir_name","inner","pr_name","byteLength","ERRNO_NAMETOOLONG","fd_pwrite","nwritten_ptr","Ciovec","nwritten","nwritten_part","fd_read","fd_readdir","cookie","bufused_ptr","bufused","dirent","fd_readdir_single","head_length","head_bytes","ArrayBuffer","write_head_bytes","min","name_length","write_name_bytes","d_next","fd_renumber","to","fd_seek","whence","offset_out_ptr","offset_out","setBigInt64","fd_tell","offset_ptr","fd_write","path_create_directory","path","path_filestat_get","path_filestat_set_times","path_link","old_fd","old_flags","old_path_ptr","old_path_len","new_fd","new_path_ptr","new_path_len","old_path","new_path","inode_obj","path_lookup","path_open","dirflags","oflags","fd_flags","opened_fd_ptr","fd_obj","opened_fd","pop","path_readlink","data_buf","path_remove_directory","path_rename","path_unlink","path_symlink","ERRNO_NOTSUP","path_unlink_file","poll_oneoff","in_ptr","out_ptr","nsubscriptions","ERRNO_INVAL","s","Subscription","read_bytes","eventtype","clockid","timeout","EVENTTYPE_CLOCK","getNow","endTime","SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME","event","Event","userdata","proc_exit","exit_code","proc_raise","sig","sched_yield","random_get","subarray","globalThis","SharedArrayBuffer","crypto","getRandomValues","random","sock_recv","ri_data","ri_flags","sock_send","si_data","si_flags","sock_shutdown","how","sock_accept"],"mappings":"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"}